swagger: "2.0"
info:
  description: 'This is swagger document for the Blog System'
  version: "1.0.0"
  title: "Pragra Blog APIs"
  contact:
    email: "info@pragra.co"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/api/v1"
tags:
  - name: "user"
    description: "All user related APIs will go here"
  - name: "category"
    description: "All category related APIs will go here"
  - name: "blog"
    description: "All blog related APIs will go here"
schemes:
  - "https"
  - "http"
paths:
  /user:
    post:
      tags:
        - "user"
      summary: "Create User for blogging purpose"
      description: ""
      operationId: "createUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User model"
          required: true
          schema:
            $ref: '#/definitions/UserDto'
      responses:
        201:
          description: 'User created successfully'
          schema:
            $ref: '#/definitions/UserDto'
        400:
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /User_All:
    get:
      tags:
        - "user"
      summary: "Finds all users"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Fetch all users"
          schema:
            $ref: '#/definitions/UserDto'
      responses:
        200:
          description: 'Ok'
          schema:
            $ref: '#/definitions/UserDto'
        404:
          description: 'Users not found'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /UserFind/{id}:
    get:
      tags:
        - "user"
      summary: "Finds user by id"
      description: "Multiple id values can be provided with comma separated strings"
      operationId: "findUserById"
      produces:
        - "application/json"
      parameters:
        - name: id
          in: path
          description: "Status values that need to be considered for filter"
          required: true
          type: integer
      responses:
        200:
          description: 'Ok'
          schema:
            $ref: '#/definitions/UserDto'
        404:
          description: 'User not found'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /UserUpdate/{id}:
    put:
      tags:
        - "user"
      summary: "Update User by Id"
      description: ""
      operationId: "UpdateUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "User model"
          required: true
          type: integer
      responses:
        201:
          description: 'User created successfully'
          schema:
            $ref: '#/definitions/UserDto'
        400:
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /UserDelete/{id}:
    delete:
      tags:
        - "user"
      summary: "Delete User based on Id"
      description: ""
      operationId: "UserDelete"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "User model"
          required: true
          type: integer
      responses:
        201:
          description: 'User deleted successfully'
          schema:
            $ref: '#/definitions/UserDto'
        400:
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ErrorResponse'

  /category:
    post:
      tags:
        - "category"
      summary: "Create Category for blogging purpose"
      description: ""
      operationId: "addCategory"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Category model"
          required: true
          schema:
            $ref: '#/definitions/CategoryDto'
      responses:
        201:
          description: 'User created successfully'
          schema:
            $ref: '#/definitions/CategoryDto'
        400:
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /Category_All:
    get:
      tags:
        - "category"
      summary: "Finds all categories"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Fetch all categories of blogs"
          schema:
            $ref: '#/definitions/CategoryDto'
      responses:
        200:
          description: 'Ok'
          schema:
            $ref: '#/definitions/CategoryDto'
        404:
          description: 'Users not found'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /category/{id}:
    get:
      tags:
        - "category"
      summary: "Finds category by id"
      description: "Multiple id values can be provided with comma separated strings"
      produces:
        - "application/json"
      parameters:
        - name: id
          in: path
          description: "id values that need to be considered for filter"
          required: true
          type: integer
      responses:
        200:
          description: 'Ok'
          schema:
            $ref: '#/definitions/CategoryDto'
        404:
          description: 'User not found'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /CategoryUpdate/{id}:
    put:
      tags:
        - "category"
      summary: "Update category by Id"
      description: ""
      operationId: "UpdateCategory"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "Category model"
          required: true
          type: integer
      responses:
        201:
          description: 'Category created successfully'
          schema:
            $ref: '#/definitions/CategoryDto'
        400:
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /CategoryDelete/{id}:
    delete:
      tags:
        - "category"
      summary: "Delete Category based on Id"
      description: ""
      operationId: "CategoryDelete"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "Category model"
          required: true
          type: integer
      responses:
        201:
          description: 'Category deleted successfully'
          schema:
            $ref: '#/definitions/CategoryDto'
        400:
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /blog:
    post:
      tags:
        - "blog"
      summary: "Create Blog entries"
      description: ""
      operationId: "addBlog"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Blog model"
          required: true
          schema:
            $ref: '#/definitions/BlogDto'
      responses:
        201:
          description: 'Blog entry created successfully'
          schema:
            $ref: '#/definitions/BlogDto'
        400:
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /Blog_All:
    get:
      tags:
        - "blog"
      summary: "Finds all blog entries"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Fetch all blog entries"
          schema:
            $ref: '#/definitions/BlogDto'
      responses:
        200:
          description: 'Ok'
          schema:
            $ref: '#/definitions/BlogDto'
        404:
          description: 'Users not found'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /Blog/{id}:
    get:
      tags:
        - "blog"
      summary: "Finds blogs by id"
      description: "Multiple id values can be provided with comma separated strings"
      produces:
        - "application/json"
      parameters:
        - name: id
          in: path
          description: "id values that need to be considered for filter"
          required: true
          type: integer
      responses:
        200:
          description: 'Ok'
          schema:
            $ref: '#/definitions/BlogDto'
        404:
          description: 'User not found'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /BlogUpdate/{id}:
    put:
      tags:
        - "blog"
      summary: "Update blogs by Id"
      description: ""
      operationId: "UpdateBlog"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "Blog model"
          required: true
          type: integer
      responses:
        201:
          description: 'Blog created successfully'
          schema:
            $ref: '#/definitions/BlogDto'
        400:
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ErrorResponse'
  /BlogDelete/{id}:
    delete:
      tags:
        - "blog"
      summary: "Delete blog based on Id"
      description: ""
      operationId: "CategoryBlog"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: path
          name: id
          description: "Blog model"
          required: true
          type: integer
      responses:
        201:
          description: 'Blog deleted successfully'
          schema:
            $ref: '#/definitions/BlogDto'
        400:
          description: 'Bad request'
          schema:
            $ref: '#/definitions/ErrorResponse'


definitions:
  UserDto:
    type: "object"
    properties:
      id:
        type: integer
        format: "int64"
      name:
        type: string
        maxLength: 100
        minimum: 10
      create_date:
        type: string
        format: date-time

  CategoryDto:
    type: "object"
    properties:
      id:
        type: integer
        format: "int64"
      name:
        type: string
      description:
        type: string

  BlogDto:
    type: object
    properties:
      id:
        type: integer
        format: "int64"
      author:
        type: integer
        format: "int64"
      category:
        type: integer
        format: "int64"
      text:
        type: string
      create_date:
        type: string
        format: date-time

  ErrorResponse:
    type: "object"
    properties:
      code:
        type: integer
        format: "int64"
      description:
        type: string
        maxLength: 40
        minimum: 10
      timestamp:
        type: string
        format: date-time

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"